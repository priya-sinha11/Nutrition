{"version":3,"sources":["Food.js","App.js","reportWebVitals.js","index.js"],"names":["Food","props","state","foods","searchedFoods","currentFood","name","calories","protein","carbs","fats","fibre","weight","food","this","setState","currFood","Number","value","searchedArray","filter","index","toLowerCase","includes","fetch","then","response","json","foodsResponse","catch","err","console","log","className","style","marginTop","onChange","event","searchFood","target","placeholder","map","cursor","padding","onClick","selectFood","toFixed","type","defaultValue","calculateChange","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a14cc2b4.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Food extends Component {\r\n   \r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            foods:[],\r\n            searchedFoods:[],\r\n            currentFood:{\r\n                name:\"-\",\r\n                calories:0,\r\n                protein:0,\r\n                carbs:0,\r\n                fats:0,\r\n                fibre:0,\r\n                weight:100,\r\n            }\r\n        }\r\n    }\r\n       \r\n\r\n    selectFood(food){\r\n        this.setState({currentFood:food});\r\n    }\r\n\r\n    calculateChange(weight){\r\n        let currFood=this.state.currentFood;\r\n\r\n        if(weight!==\"\" && weight!==0 )\r\n        {\r\n        \r\n        currFood.calories=Number((currFood.calories*weight)/currFood.weight);\r\n        currFood.carbs=Number((currFood.carbs*weight)/currFood.weight);\r\n        currFood.protein=Number((currFood.protein*weight)/currFood.weight);\r\n        currFood.fats=Number((currFood.fats*weight)/currFood.weight);\r\n        currFood.fibre=Number((currFood.fibre*weight)/currFood.weight);\r\n        currFood.weight=Number(weight);\r\n        this.setState({currentFood:currFood});\r\n    }\r\n    else{\r\n        this.setState({currentFood:currFood})\r\n    }\r\n}\r\n\r\n        searchFood(value){\r\n            if(value!==\"\")\r\n            {\r\n             let searchedArray=this.state.foods.filter((food,index)=>{\r\n                 return food.name.toLowerCase().includes(value.toLowerCase());\r\n            })\r\n\r\n            this.setState({searchedFoods:searchedArray});\r\n        }\r\n        else{\r\n            this.setState({searchedFoods:[]});\r\n        }\r\n     }\r\n\r\n    componentDidMount(){\r\n        fetch(\"http://localhost:5000/foods\")\r\n        .then((response=>response.json()))\r\n        .then((foodsResponse)=>{\r\n            this.setState({foods:foodsResponse.foods});\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err);\r\n        })\r\n    } \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n             <div className=\"form-group\" style={{marginTop:\"30px\"}}>\r\n             <input className=\"form-control\" onChange={(event)=>{\r\n                 this.searchFood(event.target.value)\r\n             }} placeholder=\"Search Food\"/>\r\n             </div>\r\n             <div className=\"search-result\">\r\n             {\r\n                 this.state.searchedFoods.map((food,index)=>(\r\n                    <div className=\"result\" style={{cursor:\"pointer\",padding:\"10px\"}} onClick={()=>{\r\n                       this.selectFood(food);\r\n                     }} key={index}>\r\n                      {food.name}\r\n                 </div>\r\n                 ))\r\n             }\r\n                 \r\n             </div>\r\n             <div className=\"product-display\">\r\n                 <table className=\"table\">\r\n                    <thead>\r\n                     <tr>\r\n                         <th>Name</th>\r\n                         <th>Calories</th>\r\n                         <th>Protein</th>\r\n                         <th>Carbs</th>\r\n                         <th>Fibre</th>\r\n                         <th>Fat</th>\r\n                         <th>Weight</th>\r\n                     </tr>\r\n                     </thead>\r\n                     <tbody>\r\n                       <tr>\r\n                           <td>{this.state.currentFood.name}</td>\r\n                           <td>{this.state.currentFood.calories.toFixed(2)}</td>\r\n                           <td>{this.state.currentFood.protein.toFixed(2)}</td>\r\n                           <td>{this.state.currentFood.carbs.toFixed(2)}</td>\r\n                           <td>{this.state.currentFood.fibre.toFixed(2)}</td>\r\n                           <td>{this.state.currentFood.fats.toFixed(2)}</td>\r\n                           <td>\r\n                           <input type=\"number\" defaultValue= {this.state.currentFood.weight}\r\n                            onChange={(event)=>{\r\n                                this.calculateChange(Number(event.target.value));\r\n                            }}/>\r\n                          </td>\r\n                       </tr>\r\n                     </tbody>\r\n                 </table>\r\n             </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport Food from './Food';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Food/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}